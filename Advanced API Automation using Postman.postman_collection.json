{
	"info": {
		"_postman_id": "85bfd753-3dd6-4443-b1b2-86cfc0837be7",
		"name": "Advanced API Automation using Postman",
		"description": "#### **Overview:**\n\nThis Postman collection provides the suite of tests for performing\n\n1. CRUD (Create, Read, Update, and Delete) operations on users in the GoRest API. The tests are designed to ensure the API behaves correctly when creating, reading, updating, and deleting user data, and to verify that appropriate responses are received. using chaining of requests, environment variables and collection runner.\n    \n\n2\\. Dynamic Data Handling for adding new products on Reqres API\n\n3\\. Performance and Load Testing of the Reqres API .",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36698587"
	},
	"item": [
		{
			"name": "PERFORMANCE and LOAD TESTING",
			"item": [
				{
					"name": "Fetch all Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.response.to.have.responseTime.lessThan(2000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/products",
							"host": [
								"{{url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" // Check if the response status code is 201 (Created) after creating a new product",
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Check if the response contains the name property for the newly created product",
									"pm.test(\"Response contains product name\", function () {",
									"    const jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property(\"name\", \"New Product\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"New Product\",\n  \"price\": 25.99,\n  \"category\": \"Electronics\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/products",
							"host": [
								"{{url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				}
			],
			"description": "#### **Overview:**\n\nThis is designed to perform **performance and load testing** of the Reqres API . By utilizing Postman Collection Runner the collection is able to simulate multiple user interactions with the API to assess its performance under varying loads.\n\n#### **Load Testing using Postman Collection Runner:**\n\n- **Description**: This test will simulate multiple concurrent requests to test how the Reqres API handles high traffic and multiple users at the same time.\n    \n- **Test Objective**: Evaluate the APIâ€™s response times, throughput, and behavior under simulated user loads.\n    \n- **Test Steps**:\n    \n    - Use Postman Collection Runner to send multiple requests to the API concurrently (adjust the number of iterations and delay).\n        \n    - Monitor the response times and check for performance degradation or failures.\n        \n    - Validate the API can handle high traffic without significantly increasing response times or returning errors.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "CRUD OPERATIONS",
			"item": [
				{
					"name": "CREATE USERS using POST METHOD",
					"item": [
						{
							"name": "POSITIVE TEST CASES",
							"item": [
								{
									"name": "Create user with all Valid Fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Set a random name for testing",
													"const randomName = \"User_\" + Math.floor(Math.random() * 1000);",
													"pm.environment.set(\"random_name\", randomName);",
													"console.log(\"Using random name: \" + randomName);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate Response Status Code is 201 for creating a new user",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"// Test to check if the user ID is present in the response",
													"pm.test(\"User ID is present\", function () {",
													"    pm.expect(jsonData).to.have.property('id');",
													"    pm.environment.set(\"valid_id\", jsonData.id); // Store valid ID for future requests",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFirstName}}\",\n    \"gender\": \"male\",\n    \"email\": \"{{$randomEmail}}\",\n    \"status\": \"active\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												""
											]
										},
										"description": "This endpoint makes an HTTP POST request to {{base_url}}/ in order to create a new user. The request body is in JSON format and includes the following parameters:\n\n- `name`: The name of the user, which is a string.\n    \n- `gender`: The gender of the user, which is a string.\n    \n- `email`: The email address of the user, which is a string.\n    \n- `status`: The status of the user, which is a string indicating whether the user is active or inactive.\n    \n\nThe request is accompanied by an access token in the authorization header for authentication. It accepts and produces responses in JSON format.\n\nThe existing description of the request includes a cURL command with headers for accepting and sending JSON data, as well as an example payload with hardcoded values. The user has requested to add descriptive comments to the scripts for this request to provide more context and clarity."
									},
									"response": []
								},
								{
									"name": "Create user with special characters in name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate Response Status Code is 201 to create new user with special characters.",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"// Test for specific property in the response body",
													"pm.test(\"Response body contains 'name' property\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('name');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"John@-12\",\n    \"gender\": \"male\",\n    \"email\": \"{{$randomEmail}}\",\n    \"status\": \"active\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user with maximum length fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate Response Status Code is 201 for creating a new user ",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"// Test for response body properties like name, gender, email, status etc.",
													"pm.test(\"Response body has name property\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('name');",
													"});",
													"pm.test(\"Response body has gender property\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('gender');",
													"});",
													"pm.test(\"Response body has email property\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('email');",
													"});",
													"pm.test(\"Response body has status property\", function () {",
													"    pm.expect(pm.response.json()).to.have.property('status');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Aditya Anil Kumar Kanojiya .............................................................\",\n    \"gender\": \"male\",\n    \"email\": \"{{$randomEmail}}\",\n    \"status\": \"active\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								}
							],
							"description": "Consists of positive test cases for CREATE USERS OPERTAION"
						},
						{
							"name": "NEGATIVE TEST CASES",
							"item": [
								{
									"name": "Create user with missing required fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate Response Status Code is 422 to create user with missing fields.",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{randomFirstName}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												""
											]
										},
										"description": "Generated from cURL: curl -i -H \"Accept: application/json\" -H \"Content-Type: application/json\" -H \"Authorization: Bearer your_access_token_here\" -X POST \"https://gorest.co.in/public/v2/users\" -d '{\n    \"name\": \"John Doe\"\n}'\n"
									},
									"response": []
								},
								{
									"name": "Create user with Invalid gender value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate Response Status Code is 422 to create user with invalid gender value",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{randomFirstName}}\",\n    \"gender\": \"invalid\",\n    \"email\": \"{{$randomEmail}}\",\n    \"status\": \"active\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												""
											]
										},
										"description": "Generated from cURL: curl -i -H \"Accept: application/json\" -H \"Content-Type: application/json\" -H \"Authorization: Bearer your_access_token_here\" -X POST \"https://gorest.co.in/public/v2/users\" -d '{\n    \"name\": \"John Doe\",\n    \"gender\": \"invalid\",\n    \"email\": \"johndoe123@example.com\",\n    \"status\": \"active\"\n}'\n"
									},
									"response": []
								},
								{
									"name": "Create user with invalid email format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate Response Status Code is 422 to create user with invalid email format",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													" // Validate that the email format is not valid",
													"pm.test(\"Validate the email format is not valid\", function () {",
													"    const responseData = pm.response.json(); ",
													"    pm.expect(responseData.email).to.not.match(/^([\\w.%+-]+)@([a-z0-9-]+\\.)+([a-z]{2,})$/);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{randomFirstName}}\",\n    \"gender\": \"male\",\n    \"email\": \"invalid-email\",\n    \"status\": \"active\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												""
											]
										},
										"description": "Generated from cURL: curl -i -H \"Accept: application/json\" -H \"Content-Type: application/json\" -H \"Authorization: Bearer your_access_token_here\" -X POST \"https://gorest.co.in/public/v2/users\" -d '{\n    \"name\": \"John Doe\",\n    \"gender\": \"male\",\n    \"email\": \"invalid-email\",\n    \"status\": \"active\"\n}'\n"
									},
									"response": []
								},
								{
									"name": "Create user with an existing email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate Response Status Code is 422 to create user using an existing email",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFirstName}}\",\n    \"gender\": \"male\",\n    \"email\": \"existing@example.com\",\n    \"status\": \"active\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												""
											]
										},
										"description": "Generated from cURL: curl -i -H \"Accept: application/json\" -H \"Content-Type: application/json\" -H \"Authorization: Bearer your_access_token_here\" -X POST \"https://gorest.co.in/public/v2/users\" -d '{\n    \"name\": \"John Doe\",\n    \"gender\": \"male\",\n    \"email\": \"existing@example.com\",\n    \"status\": \"active\"\n}'\n"
									},
									"response": []
								}
							],
							"description": "Consists of negative test cases of CREATE USERS OPERATION"
						}
					],
					"description": "**Purpose:**  \nEndpoints in this folder handle the creation of new resources in the system.\n\n#### **Create User (POST Request):**\n\n- **Description**: This request tests the ability to create a new user in the GoRest API.\n    \n- **Test Objective**: Verify that the user is successfully created with valid data and the correct status code (201)."
				},
				{
					"name": "READ USERS using GET METHOD",
					"item": [
						{
							"name": "POSITIVE TEST CASES",
							"item": [
								{
									"name": "Read newly created user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate Response Status Code is 200 to read an existent user",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Test for specific user properties",
													"var jsonData = pm.response.json(); ",
													"pm.test(\"User has a name field\", function () {",
													"    pm.expect(jsonData.name).to.be.a('string');",
													"});",
													"",
													"pm.test(\"User has a valid email id\", function () {",
													"    pm.expect(jsonData.email).to.include('@');",
													"});",
													"",
													"pm.test(\"User has a gender field\", function () {",
													"    pm.expect(jsonData.gender).to.be.oneOf(['male', 'female']);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{base_url}}/{{valid_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{valid_id}}"
											]
										},
										"description": "Generated from cURL: curl -i -H \"Accept: application/json\" -X GET \"https://gorest.co.in/public/v2/users/{valid_id}\"\n"
									},
									"response": []
								},
								{
									"name": "Read users using Filters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate Response Status Code is 200 to fetch users using filters",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Test to check if the response is an array of users filtered by gender and status",
													"const jsonData = pm.response.json();",
													"pm.test(\"Response should be an array of users filtered by criteria\", function () {",
													"    if (jsonData.length > 0) {",
													"        jsonData.forEach(user => {",
													"            pm.expect(user.gender).to.equal('male');",
													"            pm.expect(user.status).to.equal('active');",
													"        });",
													"    }",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{base_url}}/?gender=male&status=active",
											"host": [
												"{{base_url}}"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "status",
													"value": "active"
												}
											]
										},
										"description": "Generated from cURL: curl -i -H \"Accept: application/json\" -X GET \"https://gorest.co.in/public/v2/users?gender=male&status=active\"\n"
									},
									"response": []
								},
								{
									"name": "Read users using Pagination",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate Response Status Code is 200 to fetch users using pagination",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Test for response body as an array of users",
													"pm.test(\"Response should be an array of users\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an('array');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{base_url}}/?page=1&per_page=20",
											"host": [
												"{{base_url}}"
											],
											"path": [
												""
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "per_page",
													"value": "20"
												}
											]
										},
										"description": "Generated from cURL: curl -i -H \"Accept: application/json\" -X GET \"https://gorest.co.in/public/v2/users?page=1&per_page=20\"\n"
									},
									"response": []
								}
							],
							"description": "Consists of positive test cases for FETCH USERS OPERTAION"
						},
						{
							"name": "NEGATIVE TEST CASES",
							"item": [
								{
									"name": "Read a non-existent user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate Response Status Code is 404 to fetch a non-existent user",
													"pm.test(\"Response status code is 404\", function () {",
													"    pm.expect(pm.response.code).to.equal(404);",
													"});",
													"",
													"// Test for Response Time ",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{base_url}}/99999999",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"99999999"
											]
										},
										"description": "Generated from cURL: curl -i -H \"Accept: application/json\" -X GET \"https://gorest.co.in/public/v2/users/99999999\"\n"
									},
									"response": []
								},
								{
									"name": "Read a user with invalid Id Format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate Response Status Code is 404 to fetch user using invalid id",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"// Test for Response Error Message",
													"pm.test(\"Response contains expected error message\", function () {",
													"    let jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.include(\"Resource not found\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{base_url}}/1a",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"1a"
											]
										},
										"description": "Generated from cURL: curl -i -H \"Accept: application/json\" -X GET \"https://gorest.co.in/public/v2/users/invalid\"\n"
									},
									"response": []
								}
							],
							"description": "Consists of negative test cases for FETCH USERS OPERTAION"
						}
					],
					"description": "**Purpose:**  \nEndpoints in this folder retrieve resources or information from the system.\n\n#### **Read User (GET Request):**\n\n- **Description**: This request tests the ability to fetch the details of a specific user.\n    \n- **Test Objective**: Ensure that a user can be retrieved by ID with a successful response."
				},
				{
					"name": "AUTHENTICATION",
					"item": [
						{
							"name": "POSITIVE TEST CASES",
							"item": [
								{
									"name": "Read users using Valid Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Ensure access token is set",
													"if (!pm.environment.get(\"access_token\")) {",
													"    throw new Error(\"Access token is missing. Please set the access_token environment variable.\");",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate Response Status Code is 200 to get user using valid token",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate Response content is in JSON Format",
													"pm.test(\"Response content type is JSON\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{base_url}}/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												""
											]
										},
										"description": "Generated from cURL: curl -i -H \"Accept: application/json\" -H \"Authorization: Bearer your_access_token_here\" -X GET \"https://gorest.co.in/public/v2/users\"\n"
									},
									"response": []
								}
							],
							"description": "Consists of positive test cases of AUTHENTICATION RELATED OPERATION"
						},
						{
							"name": "NEGATIVE TEST CASES",
							"item": [
								{
									"name": "Read users using Invalid Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate Response Status Code is 401 for reading user using invalid token",
													"pm.test(\"Status code is 401 Unauthorized\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "0d9f63ab68bbb9aad819ff6f78aa79b93494b760af0d93a36188f2a65f4168961b0",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{base_url}}/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												""
											]
										},
										"description": "Generated from cURL: curl -i -H \"Accept: application/json\" -H \"Authorization: Bearer invalid_token\" -X GET \"https://gorest.co.in/public/v2/users\"\n"
									},
									"response": []
								}
							],
							"description": "Consists of negative test cases of AUTHENTICATION RELATED OPERATION"
						}
					],
					"description": "**Purpose:**  \nEndpoints in this folder handle the authorization using the bearer tokens in the system."
				},
				{
					"name": "UPDATE USERS using PUT METHOD",
					"item": [
						{
							"name": "POSITIVE TEST CASES",
							"item": [
								{
									"name": "Update user with valid updated values",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Ensure valid_id is set before updating user",
													"if (!pm.environment.get(\"valid_id\")) {",
													"    throw new Error(\"Valid user ID (valid_id) is missing.\");",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate Response Status Code is 200 to update existing user with updated details",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Test for response body properties after update",
													"pm.test(\"Response body has updated status\", function () {",
													"    pm.expect(pm.response.json().status).to.eql(\"inactive\");",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFirstName}}\",\n    \"status\": \"inactive\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{valid_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{valid_id}}"
											]
										},
										"description": "Generated from cURL: curl -i -H \"Accept: application/json\" -H \"Content-Type: application/json\" -H \"Authorization: Bearer your_access_token_here\" -X PUT \"https://gorest.co.in/public/v2/users/{valid_id}\" -d '{\n    \"name\": \"John Doe Updated\",\n    \"status\": \"inactive\"\n}'\n"
									},
									"response": []
								},
								{
									"name": "Update user with special characters in name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate response status code is 200 for successfull updation of user details",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"// Test to validate the request method to be PUT for update operation",
													"pm.test(\"Request method is PUT\", function () {",
													"    pm.expect(pm.request.method).to.eql(\"PUT\");",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Rose53##\",\n    \"status\": \"inactive\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{valid_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{valid_id}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Consists of positive test cases for UPDATE USERS OPERTAION"
						},
						{
							"name": "NEGATIVE TEST CASES",
							"item": [
								{
									"name": "Update user using Invalid Email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate that the response status code is 400 for an invalid email",
													"pm.test(\"Status code is 422 for invalid email\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"// Ensure the response is an array",
													"pm.test(\"Response should be an array\", function () {",
													"    let jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an(\"array\");",
													"});",
													"",
													"// Validate that the response contains the correct field and message",
													"pm.test(\"Response should indicate invalid email\", function () {",
													"    let jsonData = pm.response.json();",
													"    ",
													"    // Ensure at least one validation error is present",
													"    pm.expect(jsonData.length).to.be.greaterThan(0);",
													"    let error = jsonData.find(item => item.field === \"email\");",
													"    ",
													"    // Ensure \"email\" is mentioned in the field",
													"    pm.expect(error).to.be.an(\"object\");",
													"    pm.expect(error.field).to.equal(\"email\");",
													"",
													"    // Ensure the message mentions invalidity",
													"    pm.expect(error.message).to.include(\"is invalid\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n         \"email\": \"invalid-email\"\n     }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{valid_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{valid_id}}"
											]
										},
										"description": "Generated from cURL: curl -i -H \"Accept: application/json\" \\\n     -H \"Content-Type: application/json\" \\\n     -H \"Authorization: Bearer your_access_token_here\" \\\n     -X PUT \"https://gorest.co.in/public/v2/users/{valid_id}\" \\\n     -d '{\n         \"email\": \"invalid-email\"\n     }'\n"
									},
									"response": []
								},
								{
									"name": "Update user with empty fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate the Response Status Code is 422 to update user with empty fields",
													"pm.test(\"Status code is 422 Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"// Ensure the response is an array",
													"pm.test(\"Response should be an array\", function () {",
													"    let jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an(\"array\");",
													"});",
													"",
													"// Validate the response contains errors for required fields",
													"pm.test(\"Response should indicate missing required fields\", function () {",
													"    let jsonData = pm.response.json();",
													"    ",
													"    // Ensure errors exist in the response",
													"    pm.expect(jsonData.length).to.be.greaterThan(0);",
													"",
													"    let requiredFields = [\"email\", \"name\"];",
													"",
													"    requiredFields.forEach(field => {",
													"        let error = jsonData.find(item => item.field === field);",
													"        pm.expect(error).to.be.an(\"object\");",
													"        pm.expect(error.message).to.include(\"can't be blank\");",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"name\": \"\", \"email\": \"\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{valid_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{valid_id}}"
											]
										},
										"description": "Generated from cURL: curl -i -H \"Accept: application/json\" \\\n     -H \"Content-Type: application/json\" \\\n     -H \"Authorization: Bearer $TOKEN\" \\\n     -X PUT \"https://gorest.co.in/public/v2/users/{valid_id}\" \\\n     -d '{\"name\": \"\", \"email\": \"\"}'"
									},
									"response": []
								},
								{
									"name": "Update a non existing user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate the Response Status Code is 404 NOT FOUND for updating a non-existent user",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"packages": {},
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n         \"name\": \"{{$randomFirstName}}\",\n         \"status\": \"inactive\"\n     }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/99999999",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"99999999"
											]
										},
										"description": "Generated from cURL: curl -i -H \"Accept: application/json\" \\\n     -H \"Content-Type: application/json\" \\\n     -H \"Authorization: Bearer your_access_token_here\" \\\n     -X PUT \"https://gorest.co.in/public/v2/users/99999999\" \\\n     -d '{\n         \"name\": \"Updated Name\",\n         \"status\": \"inactive\"\n     }'\n"
									},
									"response": []
								}
							],
							"description": "Consists of negative test cases for UPDATE USERS OPERTAION"
						}
					],
					"description": "**Purpose:**  \nEndpoints in this folder modify or update resources in the system.\n\n#### **Update User (PUT Request):**\n\n- **Description**: This request tests the ability to update user details.\n    \n- **Test Objective**: Ensure that a user's details can be updated successfully, including fields like name and status."
				},
				{
					"name": "DELETE USERS using DELETE METHOD",
					"item": [
						{
							"name": "POSITIVE TEST CASES",
							"item": [
								{
									"name": "Delete a valid existent user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Ensure valid_id is set before deleting user",
													"if (!pm.environment.get(\"valid_id\")) {",
													"    throw new Error(\"Valid user ID (valid_id) is missing.\");",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate that Response Status Code is 204 for deleting a Valid Existent User",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204); ",
													"});",
													"",
													"// Optionally, check if the user still exists after deletion (GET request)",
													"let deletedUserId = pm.environment.get(\"valid_id\");",
													"pm.sendRequest({",
													"    url: `https://gorest.co.in/public/v2/users/${deletedUserId}`,",
													"    method: 'GET',",
													"}, (err, res) => {",
													"    if (res) {",
													"        pm.test(\"Deleted user should return a status of 404\", function () {",
													"            pm.expect(res).to.have.property('code', 404);",
													"        });",
													"    }",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{base_url}}/{{valid_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{valid_id}}"
											]
										},
										"description": "Generated from cURL: curl -i -H \"Accept: application/json\" \\\n     -H \"Authorization: Bearer $TOKEN\" \\\n     -X DELETE \"https://gorest.co.in/public/v2/users/{valid_id}\""
									},
									"response": []
								},
								{
									"name": "Fetch an already deleted user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to GET already deleted user and response status Code 404 NOT FOUND",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404); ",
													"});",
													"",
													"let deletedUserId = pm.environment.get(\"valid_id\");",
													"pm.sendRequest({",
													"    url: `https://gorest.co.in/public/v2/users/${deletedUserId}`,",
													"    method: 'GET',",
													"}, (err, res) => {",
													"    if (res) {",
													"        pm.test(\"Deleted user should return a status of 404\", function () {",
													"            pm.expect(res).to.have.property('code', 404);",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{valid_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{valid_id}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Consists of positive test cases for DELETE USERS OPERTAION"
						},
						{
							"name": "NEGATIVE TEST CASES",
							"item": [
								{
									"name": "Delete an already deleted user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test for Response Status Code 404 for deleting already deleted user",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404); ",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{base_url}}/{{valid_id}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{valid_id}}"
											]
										},
										"description": "Generated from cURL: curl -i -H \"Accept: application/json\" \\\n     -H \"Authorization: Bearer $TOKEN\" \\\n     -X DELETE \"https://gorest.co.in/public/v2/users/{valid_id}\""
									},
									"response": []
								},
								{
									"name": "Delete a non existent user with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test for Response Status Code for non-existent user",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{base_url}}/99999999",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"99999999"
											]
										},
										"description": "Generated from cURL: curl -i -H \"Accept: application/json\" \\\n     -H \"Authorization: Bearer $TOKEN\" \\\n     -X DELETE \"https://gorest.co.in/public/v2/users/99999999\""
									},
									"response": []
								}
							],
							"description": "Consists of negative test cases for DELETE USERS OPERTAION"
						}
					],
					"description": "**Purpose:**  \nEndpoints in this folder handle the removal of resources from the system.\n\n#### **Delete User (DELETE Request):**\n\n- **Description**: This request tests the ability to delete a user from the GoRest API.\n    \n- **Test Objective**: Verify that a user can be deleted successfully and that the user no longer exists in the system."
				}
			],
			"description": "#### **Overview:**\n\nprovides the suite of tests for performing CRUD (Create, Read, Update, and Delete) operations on users in the GoRest API. The tests are designed to ensure the API behaves correctly when creating, reading, updating, and deleting user data, and to verify that appropriate responses are returned for each operation."
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "0d9f63ab689aad819ff6f78aa79b93494b760af0d93a36188f2a65f4168961b0",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}